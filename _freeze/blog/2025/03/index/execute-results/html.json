{
  "hash": "6d78c8d5169e3d37c096fcbb281a90d9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"cluster analysis\"\ndate: 3/6/2025\ndescription: \"methods and a practical use case\"\nformat:\n  html:\n    css: styles.css\n    code-fold: true\n    code-tools: true\n    code-overflow: wrap\n    code-line-numbers: false\n    lightbox: true\n# doi: \ncitation: true\ndraft: true\n---\n\n\n\n\n\n> The programs (together with their sources and the data sets used in\nthe book) are available on floppy disks by writing to the authors.\n\n## cluster analysis \n\nThe goal of cluster analysis is to find groups in the data. Sometimes groups are naturally present in the data, and sometimes they are artificially created. These groups are called clusters and the analyst tries to discover them using statistical techniques. Cluster analysis establishes the groups to which several data points belong. It does not assign objects to groups that have been defined in advance.\n\nThe data are organized in tabular form in one of two ways. The first places each object in a row and each measured attribute in a column. Think of a group of people and their heights, weights, and ages. Each row represents a person, and the columns show their measurements. This is called an *n-by-p* matrix.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/data_matrix.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\nThe second places the objects in columns and rows. This is called a *n-by-n* matrix. Think of a group of cities for which we want to compare driving distances. Each city would be assigned a row and a column, and the intersection of the row and column would contain the driving distance between the two cities. \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/one_mode.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\nBefore the clusters are identified, the data needs to be transformed^[The aim of transforming the data is to assign equal weights to all variables, thus getting rid of relative weights across the board to achieve an objective comparison. However, some variables will, at times, be more important than other, and this matter should not be disregarded.] to make them suitable for cluster analysis. Why? Because depending on the units of our measurements, the grouping may be interpreted differently. For example, if we have a data set with the heights of people in centimeters and weights in kilograms, the clustering may be different than if we had the heights in inches and weights in pounds.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n\npersons_data <- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Eve\"),\n  Weight = c(15,49,13,45,85),\n  Height = c(95, 160, 90, 160, 180)\n) \n\nperson_table <- persons_data |>\n  tinytable::tt(digits = 3,\n     caption = \"Weight and Height of Five People, expressed in Kilograms and Centimeters\",\n     theme = \"spacing\"\n    ) |>\n  style_tt(align = \"lcc\",\n           boostrap_class = \"table table-hover\")\n\nperson_table\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_8ohn8fe279wb8bf2j4zg(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_8ohn8fe279wb8bf2j4zg\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_8ohn8fe279wb8bf2j4zg');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_8ohn8fe279wb8bf2j4zg(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_8ohn8fe279wb8bf2j4zg\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 5, j: 0 },  ], css_id: 'tinytable_css_zuxz9a7s6gphutd7ze66',}, \n          { positions: [ { i: 0, j: 2 },  ], css_id: 'tinytable_css_xevh7bcju25w5prulys2',}, \n          { positions: [ { i: 1, j: 2 }, { i: 2, j: 2 }, { i: 3, j: 2 }, { i: 4, j: 2 },  ], css_id: 'tinytable_css_soefabl2pok8vld2ti96',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 }, { i: 4, j: 0 },  ], css_id: 'tinytable_css_jrm2bcy7k4fz0k7t5xjf',}, \n          { positions: [ { i: 0, j: 1 },  ], css_id: 'tinytable_css_ijhwftu0f9hlz4r5akiw',}, \n          { positions: [ { i: 1, j: 1 }, { i: 2, j: 1 }, { i: 3, j: 1 }, { i: 4, j: 1 },  ], css_id: 'tinytable_css_ii764s6clbs0p0320jg2',}, \n          { positions: [ { i: 5, j: 2 },  ], css_id: 'tinytable_css_di9heiwfde3yy70e02so',}, \n          { positions: [ { i: 5, j: 1 },  ], css_id: 'tinytable_css_dffevcrr271oeljyeap0',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_5nyxrghnki5m897uktor',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_8ohn8fe279wb8bf2j4zg(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_zuxz9a7s6gphutd7ze66, .table th.tinytable_css_zuxz9a7s6gphutd7ze66 { text-align: left; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; }\n      .table td.tinytable_css_xevh7bcju25w5prulys2, .table th.tinytable_css_xevh7bcju25w5prulys2 { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_soefabl2pok8vld2ti96, .table th.tinytable_css_soefabl2pok8vld2ti96 { text-align: center; padding-bottom: 0.1em; }\n      .table td.tinytable_css_jrm2bcy7k4fz0k7t5xjf, .table th.tinytable_css_jrm2bcy7k4fz0k7t5xjf { text-align: left; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_ijhwftu0f9hlz4r5akiw, .table th.tinytable_css_ijhwftu0f9hlz4r5akiw { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_ii764s6clbs0p0320jg2, .table th.tinytable_css_ii764s6clbs0p0320jg2 { text-align: center; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_di9heiwfde3yy70e02so, .table th.tinytable_css_di9heiwfde3yy70e02so { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_dffevcrr271oeljyeap0, .table th.tinytable_css_dffevcrr271oeljyeap0 { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; }\n      .table td.tinytable_css_5nyxrghnki5m897uktor, .table th.tinytable_css_5nyxrghnki5m897uktor { text-align: left; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; padding-bottom: 0.1em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_8ohn8fe279wb8bf2j4zg\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        <caption>Weight and Height of Five People, expressed in Kilograms and Centimeters</caption>\n              <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Weight</th>\n                <th scope=\"col\">Height</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>Alice  </td>\n                  <td>15</td>\n                  <td>95 </td>\n                </tr>\n                <tr>\n                  <td>Bob    </td>\n                  <td>49</td>\n                  <td>160</td>\n                </tr>\n                <tr>\n                  <td>Charlie</td>\n                  <td>13</td>\n                  <td>90 </td>\n                </tr>\n                <tr>\n                  <td>Diana  </td>\n                  <td>45</td>\n                  <td>160</td>\n                </tr>\n                <tr>\n                  <td>Eve    </td>\n                  <td>85</td>\n                  <td>180</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n\n\npar(family = \"serif\")\nplot.new()\nplot.window(\n  xlim = c(0,90),\n  ylim = c(0,200)\n            )\n\npoints(persons_data$Weight, persons_data$Height, pch = 19, col = \"gray50\")\ntext(persons_data$Weight, persons_data$Height, labels = persons_data$Name, pos = 3, cex = 1.10)\naxis(1, at = seq(0, 90, 15), tcl = -0.05, labels = TRUE)\naxis(2, at = seq(0, 200, 20), tcl = -0.05, labels = TRUE, las=2)\nmtext(\"Weight (kg)\", side = 1, line = 2.5, at = 80, font = 2, cex = 1.2)\nmtext(\"Height (cm)\", side = 2, line = -6.5, at = 200,las = 2, font = 2, cex = 1.2)\n\npounds <- persons_data$Weight * 2.20462\ninches <- persons_data$Height * 0.393701\n\nplot.new()\nplot.window(\n  xlim = c(0,200),\n  ylim = c(0,120)\n            )\n\npoints(pounds,inches, pch = 19, col = \"gray50\")\ntext(pounds, inches, labels = persons_data$Name, pos = 3, cex = 1.10)\naxis(1, at = seq(0, 200, 15), tcl = -0.05, labels = TRUE)\naxis(2, at = seq(0, 90, 15), tcl = -0.05, labels = TRUE, las=2)\nmtext(\"Weight (lbs)\", side = 1, line = 2.5, at = 180, font = 2, cex = 1.2)\nmtext(\"Height (in)\", side = 2, line = -6.5, at = 90,las = 2, font = 2, cex = 1.2)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/plot1.png){fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![](img/flatter.png){fig-align='center' width=100%}\n:::\n:::\n\n\nNotice in this example that the first plot offers a clearer natural partition of groups than the second plot. We can see that Charlie and Alice are most likely children while Diana, Bob and Eve are adults. The height of a person gives a better indication of adulthood than weight. So when we plot height in inches againts weight in pounds, weight becomes the dominant variable and the distinction between clusters become less clear.\n\n## variable selection\n\nWhat variables shall we choose? Should we standardize or use the raw data? To answer the first question, let me say that we should use variables that contain relevant information about each object. Sometimes these decisions will come down to common sense or expert knowledge. For example,using phone numbers, license plates,favorite colors,country flags,a variable where all rows are missing, etc., for each object is useless because none of these variable provide relevant information about the objects they represent. \n\nThe negative side effect of using such variables is that are clusters will fail to form because of the randomness introduced by these “trash” variables. The soultion here is to assign a weight or zero or remove them from our data. \n\nTo answer the standardization question– we should standardize the data prior to calculating disances if we think the units chosen were not appropriate or well thought-out measures and we'd like to assign weights to the variables. Additionally, if, based on prior knowledge, we would like to apply certain weights to each variable, we can standardize or just chnage the measurement units. However, if we'd like to keep the data intact because the measurements are meaningful, don't standardize.\n\nIn our particular example, we'd like to avoid the dependence on measurement units, wso we standardize the data to convert the original measurements to uniteless variables. \n\n$$\n\\begin{split}\nm_{f} = \\frac{1}{n} \\sum_{x = 1}^{n}x_{f}   \\\\\nstd_{f} = \\sqrt{\\frac{1}{n-1} \\sum_{x = 1}^{n} (x_{f} - m_{f}^2)} \\\\\n\\end{split}\n$$\n\nHowever,because the mean and standard deviation are affected by outliers, it is better to use the mean absolute deviation to calculate the standardized values. \n$$\n\\begin{split}\ns_{f} = \\frac{1}{n} \\sum_{x = 1}^{n}|x_{f}-m_{f}| \\\\\nz_{if} = \\frac{x_{if} - m_{f}}{s_{f}}\n\\end{split}\n$$\nNow our data have mean of zero and a mean absolute deviation of 1. We can begin using the standardized data instead of the original^[If every variable is expressed in the same units, there's no need for standardization.].\n\n\n## distance metrics\nNext, we find the distances between the objects to quantify their degree of dissimilarity. All distance function must satisfy the following requirements:\n\n$$\n\\begin{split}\nd(i,j) \\geq 0 \\\\\nd(i,i) = 0 \\\\\nd(i,j) = d(j,i)\\\\\nd(i,j) \\leq d(i,h) + d(h,j)\\\\\n\\end{split}\n$$\nSo distances must be nonnegative numbers^[by the same token, we can only calculate distances for non-missing object pairs. $n$ is the total number of non-missing objects]. The distance of an object to itself must be zero. The distance between to objects is the same regardless of the order in which they are compared. And lastly, the distance between two objects is always less than or equal to the sum of the distances between the two objects and a third object.\n\n### euclidean distance\n\n$$\n\\begin{split}\nd(i,j) = \\sqrt{\\sum_{n=1}^{p} (x_{in} - x_{jn})^2}\n\\end{split}\n$$ \n\n### manhattan distance\n\n$$\n\\begin{split}\nd(i,j) = \\sum_{n =1}^{p} |x_{in}-x_{jn}|\n\\end{split}\n$$\n\n\n### minkowski distance  \n\nThis is a generalization of the Euclidean and Manhattan metric, where $q$ is any real number larger than 1. \n$$\n\\begin{split}\nd(i,j) = {\\sum_{n =1}^{p}|x_{in}-x_{jn}|^\\frac{1}{q}}\n\\end{split}\n$$\n\n\n### weighted euclidean distance\n\nA slight variation on the Euclidean distance where each variable receives a weight^[giving a variable a weight of 2 is the same thing as using it twice] according to its relative importance.\n$$\n\\begin{split}\nd(i,j) = \\sqrt{wn\\sum_{n=1}^{p} (x_{in} - x_{jn})^2}\n\\end{split}\n$$\n\nHere's the Euclidean and Manhattan distances for our previous example: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\neuclidean <- dist(persons_data[,2:3],\n                  method = \"euclidean\",\n                  diag = FALSE,\n                  upper = FALSE) |>\n  as.matrix() \n\n# Keep only the lower triangle (excluding diagonal)\neuclidean[upper.tri(euclidean, diag = FALSE)] <- NA\n\n  euclidean <- euclidean |>\n    as.data.frame() |>\n    dplyr::rename(\n      Alice = 1,\n      Charlie = 2,\n      Diana = 3,\n      Bob = 4,\n      Eve = 5\n    ) \n\nrownames(euclidean) <- persons_data$Name\n\neuclidean_table <- euclidean |>\n  tinytable::tt(\n    digits = 2,\n    caption = \"Euclidean Distance of Unstandardized Weight(kg) and Height(cm) for five people\",\n     theme = \"spacing\",\n    rownames = TRUE\n    ) |>\n  style_tt(align = \"c\",\n           boostrap_class = \"table table-hover\")\n\neuclidean_table\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_x0pl2qgyp7i6yhq14h8y(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_x0pl2qgyp7i6yhq14h8y\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_x0pl2qgyp7i6yhq14h8y');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_x0pl2qgyp7i6yhq14h8y(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_x0pl2qgyp7i6yhq14h8y\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 }, { i: 4, j: 0 }, { i: 3, j: 1 }, { i: 4, j: 1 }, { i: 1, j: 1 }, { i: 2, j: 1 }, { i: 1, j: 2 }, { i: 2, j: 2 }, { i: 3, j: 2 }, { i: 4, j: 2 }, { i: 3, j: 3 }, { i: 4, j: 3 }, { i: 1, j: 3 }, { i: 2, j: 3 }, { i: 1, j: 4 }, { i: 2, j: 4 }, { i: 3, j: 4 }, { i: 4, j: 4 },  ], css_id: 'tinytable_css_xfydc5fcjbh297ht3o00',}, \n          { positions: [ { i: 5, j: 2 }, { i: 5, j: 0 }, { i: 5, j: 3 }, { i: 5, j: 1 }, { i: 5, j: 4 },  ], css_id: 'tinytable_css_vsppibd9dpbwajpf9l71',}, \n          { positions: [ { i: 0, j: 5 },  ], css_id: 'tinytable_css_vnqhf1zphmzceip2ifmk',}, \n          { positions: [ { i: 5, j: 5 },  ], css_id: 'tinytable_css_n4d4mltnidegvqm08zhr',}, \n          { positions: [ { i: 1, j: 5 }, { i: 2, j: 5 }, { i: 3, j: 5 }, { i: 4, j: 5 },  ], css_id: 'tinytable_css_8oz4asisqrorbtcrf66e',}, \n          { positions: [ { i: 0, j: 0 }, { i: 0, j: 3 }, { i: 0, j: 1 }, { i: 0, j: 4 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_49508imbndb5bmdqdoj2',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_x0pl2qgyp7i6yhq14h8y(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_xfydc5fcjbh297ht3o00, .table th.tinytable_css_xfydc5fcjbh297ht3o00 { text-align: center; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_vsppibd9dpbwajpf9l71, .table th.tinytable_css_vsppibd9dpbwajpf9l71 { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; }\n      .table td.tinytable_css_vnqhf1zphmzceip2ifmk, .table th.tinytable_css_vnqhf1zphmzceip2ifmk { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_n4d4mltnidegvqm08zhr, .table th.tinytable_css_n4d4mltnidegvqm08zhr { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_8oz4asisqrorbtcrf66e, .table th.tinytable_css_8oz4asisqrorbtcrf66e { text-align: center; padding-bottom: 0.1em; }\n      .table td.tinytable_css_49508imbndb5bmdqdoj2, .table th.tinytable_css_49508imbndb5bmdqdoj2 { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; padding-bottom: 0.1em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_x0pl2qgyp7i6yhq14h8y\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        <caption>Euclidean Distance of Unstandardized Weight(kg) and Height(cm) for five people</caption>\n              <tr>\n                <th scope=\"col\">rowname</th>\n                <th scope=\"col\">Alice</th>\n                <th scope=\"col\">Charlie</th>\n                <th scope=\"col\">Diana</th>\n                <th scope=\"col\">Bob</th>\n                <th scope=\"col\">Eve</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>Alice  </td>\n                  <td>0    </td>\n                  <td>  </td>\n                  <td>   </td>\n                  <td>  </td>\n                  <td> </td>\n                </tr>\n                <tr>\n                  <td>Bob    </td>\n                  <td>73.4 </td>\n                  <td>0 </td>\n                  <td>   </td>\n                  <td>  </td>\n                  <td> </td>\n                </tr>\n                <tr>\n                  <td>Charlie</td>\n                  <td>5.4  </td>\n                  <td>79</td>\n                  <td>0  </td>\n                  <td>  </td>\n                  <td> </td>\n                </tr>\n                <tr>\n                  <td>Diana  </td>\n                  <td>71.6 </td>\n                  <td>4 </td>\n                  <td>77 </td>\n                  <td>0 </td>\n                  <td> </td>\n                </tr>\n                <tr>\n                  <td>Eve    </td>\n                  <td>110.1</td>\n                  <td>41</td>\n                  <td>115</td>\n                  <td>45</td>\n                  <td>0</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n\n```{.r .cell-code}\n\nmanhattan <- dist(persons_data[,2:3],\n                  method = \"manhattan\",\n                  diag = FALSE,\n                  upper = FALSE) |>\n  as.matrix() \n\nmanhattan[upper.tri(manhattan, diag = FALSE)] <- NA\n\n  manhattan <- manhattan |>\n    as.data.frame() |>\n    dplyr::rename(\n      Alice = 1,\n      Charlie = 2,\n      Diana = 3,\n      Bob = 4,\n      Eve = 5\n    ) \n\nrownames(manhattan) <- persons_data$Name\n\nmanhattan_table <- manhattan |>\n  tinytable::tt(\n    digits = 2,\n    caption = \"Manhattan Distance of Unstandardized Weight(kg) and Height(cm) for five people\",\n     theme = \"spacing\",\n    rownames = TRUE\n    ) |>\n  style_tt(align = \"c\",\n           boostrap_class = \"table table-hover\")\n\nmanhattan_table\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_6isdr35m77g34zp04fwp(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_6isdr35m77g34zp04fwp\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_6isdr35m77g34zp04fwp');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_6isdr35m77g34zp04fwp(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_6isdr35m77g34zp04fwp\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 }, { i: 4, j: 0 }, { i: 3, j: 1 }, { i: 4, j: 1 }, { i: 1, j: 1 }, { i: 2, j: 1 }, { i: 1, j: 2 }, { i: 2, j: 2 }, { i: 3, j: 2 }, { i: 4, j: 2 }, { i: 3, j: 3 }, { i: 4, j: 3 }, { i: 1, j: 3 }, { i: 2, j: 3 }, { i: 1, j: 4 }, { i: 2, j: 4 }, { i: 3, j: 4 }, { i: 4, j: 4 },  ], css_id: 'tinytable_css_xtldxasckmopvzqi2mv7',}, \n          { positions: [ { i: 0, j: 5 },  ], css_id: 'tinytable_css_vjttmqj1qir5p6iisd4l',}, \n          { positions: [ { i: 5, j: 2 }, { i: 5, j: 0 }, { i: 5, j: 3 }, { i: 5, j: 1 }, { i: 5, j: 4 },  ], css_id: 'tinytable_css_qps88lep6n9l8y5vsjlh',}, \n          { positions: [ { i: 5, j: 5 },  ], css_id: 'tinytable_css_mdaqbaz9zp3jflgae2b1',}, \n          { positions: [ { i: 1, j: 5 }, { i: 2, j: 5 }, { i: 3, j: 5 }, { i: 4, j: 5 },  ], css_id: 'tinytable_css_45jdqest4lkfy3o0q65h',}, \n          { positions: [ { i: 0, j: 0 }, { i: 0, j: 3 }, { i: 0, j: 1 }, { i: 0, j: 4 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_0uo32ak4ofa7c6olltnr',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_6isdr35m77g34zp04fwp(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_xtldxasckmopvzqi2mv7, .table th.tinytable_css_xtldxasckmopvzqi2mv7 { text-align: center; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_vjttmqj1qir5p6iisd4l, .table th.tinytable_css_vjttmqj1qir5p6iisd4l { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_qps88lep6n9l8y5vsjlh, .table th.tinytable_css_qps88lep6n9l8y5vsjlh { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; }\n      .table td.tinytable_css_mdaqbaz9zp3jflgae2b1, .table th.tinytable_css_mdaqbaz9zp3jflgae2b1 { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_45jdqest4lkfy3o0q65h, .table th.tinytable_css_45jdqest4lkfy3o0q65h { text-align: center; padding-bottom: 0.1em; }\n      .table td.tinytable_css_0uo32ak4ofa7c6olltnr, .table th.tinytable_css_0uo32ak4ofa7c6olltnr { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; padding-bottom: 0.1em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_6isdr35m77g34zp04fwp\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        <caption>Manhattan Distance of Unstandardized Weight(kg) and Height(cm) for five people</caption>\n              <tr>\n                <th scope=\"col\">rowname</th>\n                <th scope=\"col\">Alice</th>\n                <th scope=\"col\">Charlie</th>\n                <th scope=\"col\">Diana</th>\n                <th scope=\"col\">Bob</th>\n                <th scope=\"col\">Eve</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>Alice  </td>\n                  <td>0  </td>\n                  <td>   </td>\n                  <td>   </td>\n                  <td>  </td>\n                  <td> </td>\n                </tr>\n                <tr>\n                  <td>Bob    </td>\n                  <td>99 </td>\n                  <td>0  </td>\n                  <td>   </td>\n                  <td>  </td>\n                  <td> </td>\n                </tr>\n                <tr>\n                  <td>Charlie</td>\n                  <td>7  </td>\n                  <td>106</td>\n                  <td>0  </td>\n                  <td>  </td>\n                  <td> </td>\n                </tr>\n                <tr>\n                  <td>Diana  </td>\n                  <td>95 </td>\n                  <td>4  </td>\n                  <td>102</td>\n                  <td>0 </td>\n                  <td> </td>\n                </tr>\n                <tr>\n                  <td>Eve    </td>\n                  <td>155</td>\n                  <td>56 </td>\n                  <td>162</td>\n                  <td>60</td>\n                  <td>0</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\nNotice that regardless of the distance metric used, the groups are comparably the same. However, this matrix doesn't clearly show the cluster structure of our data like the bivariate scatterplot. Nevertheless, this is the matrix our clustering algorithm works with. \n\n\n## dissimilarities\n\nWe refer to the many possibilities that can function as a distance matrix as *dissimilarities*. Dissimilarity coefficients must be non-negative numbers that are small when $i$ and $j$ are near to each other and large when they are very different. Dissimilarities can be computed for binary, nominal, ordinal, interval, and continuous variables, or a combination of these. \n\nOne such dissimilarity index is Pearson's product-moment coefficient^[. Pearson's *r* looks for a linear relationship between two variables while Spearman's rho looks for a monotonic relationship, not a linear one.] or Spearman's rho. These correlation coefficients can be converted to dissimilarities\n\n$$\n\\begin{split}\nR(f,g) = \\frac{\\sum_{i=1}^{n} (x_{if} - m_{f})(X_{ig} - m_{g})}{\\sqrt{\\sum_{i=1}^{n} (x_{if} - m_{f})^2} \\sqrt{\\sum_{i=1}^{n} (x_{ig} - m_{g})^2}} \\\\ \n\\\\\n\\\\\nd(f,g) = (1 - R(f,g))/2\n\\end{split}\n$$\nUsing the previous formula for $d(f,g)$, we see that variables with a high positive correlation will have a dissimilarity coefficient close to zero while variables with a high negative correlation will be very dissimilar. Another formula that's available is the following:\n\n$$\n\\begin{split}\nd(f,g) = 1 - |R(f,g)|\n\\end{split}\n$$\n\nBy adding a third variable, `Year`, to represent each person's birth year, we can compute a dissimilarity matrix that shows how different or distant is the birth year from the weight and height of each person. The resulting matrix would help us determine how many groups and which members to include in each group. \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n\npersons_df_with_year <- persons_data |>\n  dplyr::mutate(\n    Year = c(2018,\n             1999,\n             2020,\n             1889,\n             2003),\n    .before  = 2\n  ) \n\nyear_table <- persons_df_with_year |>\n  tinytable::tt(digits = 0,\n                caption = \"Birth Year, Weight(kg) and Height(cm) of Five People, expressed in Kilograms and Centimeters\",\n                theme = \"spacing\") |>\n  tinytable::style_tt(align = \"lccc\")\n\nyear_table\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_3ex5a1spj4v23p8cr0fd(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_3ex5a1spj4v23p8cr0fd\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_3ex5a1spj4v23p8cr0fd');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_3ex5a1spj4v23p8cr0fd(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_3ex5a1spj4v23p8cr0fd\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 1, j: 1 }, { i: 3, j: 1 }, { i: 4, j: 1 }, { i: 3, j: 2 }, { i: 2, j: 1 }, { i: 1, j: 2 }, { i: 2, j: 2 }, { i: 4, j: 2 },  ], css_id: 'tinytable_css_w630rdoyqvp7tcudff1z',}, \n          { positions: [ { i: 0, j: 1 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_ug9vbw3i98ixdhqb3mx1',}, \n          { positions: [ { i: 5, j: 3 },  ], css_id: 'tinytable_css_tw6n5e0rcglirtze5d0d',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_nxzio0qc9usqa15prbkk',}, \n          { positions: [ { i: 0, j: 3 },  ], css_id: 'tinytable_css_jw50m6frs019r20ry110',}, \n          { positions: [ { i: 1, j: 3 }, { i: 2, j: 3 }, { i: 3, j: 3 }, { i: 4, j: 3 },  ], css_id: 'tinytable_css_dfnohs8dcsy7vb7o9p7c',}, \n          { positions: [ { i: 5, j: 0 },  ], css_id: 'tinytable_css_1hoi85fq2cpybx7cy2rh',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 }, { i: 4, j: 0 },  ], css_id: 'tinytable_css_17si0nlt705n844ny779',}, \n          { positions: [ { i: 5, j: 1 }, { i: 5, j: 2 },  ], css_id: 'tinytable_css_0xjqfre523ydj79wopwj',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_3ex5a1spj4v23p8cr0fd(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_w630rdoyqvp7tcudff1z, .table th.tinytable_css_w630rdoyqvp7tcudff1z { text-align: center; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_ug9vbw3i98ixdhqb3mx1, .table th.tinytable_css_ug9vbw3i98ixdhqb3mx1 { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_tw6n5e0rcglirtze5d0d, .table th.tinytable_css_tw6n5e0rcglirtze5d0d { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_nxzio0qc9usqa15prbkk, .table th.tinytable_css_nxzio0qc9usqa15prbkk { text-align: left; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_jw50m6frs019r20ry110, .table th.tinytable_css_jw50m6frs019r20ry110 { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_dfnohs8dcsy7vb7o9p7c, .table th.tinytable_css_dfnohs8dcsy7vb7o9p7c { text-align: center; padding-bottom: 0.1em; }\n      .table td.tinytable_css_1hoi85fq2cpybx7cy2rh, .table th.tinytable_css_1hoi85fq2cpybx7cy2rh { text-align: left; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; }\n      .table td.tinytable_css_17si0nlt705n844ny779, .table th.tinytable_css_17si0nlt705n844ny779 { text-align: left; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_0xjqfre523ydj79wopwj, .table th.tinytable_css_0xjqfre523ydj79wopwj { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_3ex5a1spj4v23p8cr0fd\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        <caption>Birth Year, Weight(kg) and Height(cm) of Five People, expressed in Kilograms and Centimeters</caption>\n              <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Year</th>\n                <th scope=\"col\">Weight</th>\n                <th scope=\"col\">Height</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>Alice  </td>\n                  <td>2018</td>\n                  <td>15</td>\n                  <td>95 </td>\n                </tr>\n                <tr>\n                  <td>Bob    </td>\n                  <td>1999</td>\n                  <td>49</td>\n                  <td>160</td>\n                </tr>\n                <tr>\n                  <td>Charlie</td>\n                  <td>2020</td>\n                  <td>13</td>\n                  <td>90 </td>\n                </tr>\n                <tr>\n                  <td>Diana  </td>\n                  <td>1889</td>\n                  <td>45</td>\n                  <td>160</td>\n                </tr>\n                <tr>\n                  <td>Eve    </td>\n                  <td>2003</td>\n                  <td>85</td>\n                  <td>180</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\nLet's come up with the dissimilarity matrix for these data using the two dissimilarity formulas we've looked at. \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n\ncluster_dissimilarity <- function(x, \n                                  dissimilarity_method = c(\"halved\",\"absolute\"),\n                                  correlation = c(\"pearson\",\"spearman\")\n                                  ){\n  \n  # Stop if not a matrix or data frame\n  stopifnot(is.matrix(x) || is.data.frame(x))\n  \n  # If function args don't match these, stop.\n  dissimilarity_method <- match.arg(dissimilarity_method)\n  correlation <- match.arg(correlation)\n  \n  # Just in case any columns are strings or factors, \n  # convert df to numeric to compute correlation\n  x <- data.matrix(x)\n  \n  cor_coeff <- cor(x,method = correlation)\n  \n  dissimilarity_coeff <- switch(dissimilarity_method,\n     \"halved\"  = (1 - cor_coeff)/2,\n     \"absolute\"= 1 - abs(cor_coeff)\n  )\n  \n  # remove redundant correlations\n  dissimilarity_coeff[upper.tri(dissimilarity_coeff, diag = FALSE)] <- NA\n  \n  return(dissimilarity_coeff)\n}\n\npearsons_dissimilarity <- cluster_dissimilarity(persons_df_with_year, \n                              dissimilarity_method = \"halved\",\n                              correlation = \"pearson\") |>\n  # Need to convert to df before creating to tinytable\n  as.data.frame() \n\n# Add rownames to the data frame\nrownames(pearsons_dissimilarity) <- c(\"Name\",\"Year\",\"Weight\",\"Height\")\n\n  pearsons_table <- pearsons_dissimilarity |>\n    tinytable::tt(digits = 3,\n                caption = \"Dissimilarity Coefficients Between Year, Weight(kg) and Height(cm) Using Pearson's r and the Halved Dissimilarity Formula\",\n                theme = \"spacing\",\n                rownames = TRUE) |>\n  tinytable::style_tt(align = \"lcccc\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n::: {.columns gap=\"4em\"}\n::: {.column width=\"60%\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_03doh3mriog5hgfs9ecz(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_03doh3mriog5hgfs9ecz\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_03doh3mriog5hgfs9ecz');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_03doh3mriog5hgfs9ecz(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_03doh3mriog5hgfs9ecz\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 4, j: 1 }, { i: 4, j: 2 }, { i: 4, j: 3 },  ], css_id: 'tinytable_css_t8te0c4vpdhuh18uqrui',}, \n          { positions: [ { i: 0, j: 1 }, { i: 0, j: 2 }, { i: 0, j: 3 },  ], css_id: 'tinytable_css_qhqj4dknovfynoemktb5',}, \n          { positions: [ { i: 0, j: 4 },  ], css_id: 'tinytable_css_m8dkmpr2rbybgqpgdos9',}, \n          { positions: [ { i: 1, j: 4 }, { i: 2, j: 4 }, { i: 3, j: 4 },  ], css_id: 'tinytable_css_dpfskk8ouzgvvajpvihr',}, \n          { positions: [ { i: 4, j: 0 },  ], css_id: 'tinytable_css_c0xjn7mgtp95cl9f4x1v',}, \n          { positions: [ { i: 3, j: 1 }, { i: 3, j: 2 }, { i: 1, j: 1 }, { i: 2, j: 1 }, { i: 2, j: 2 }, { i: 2, j: 3 }, { i: 3, j: 3 }, { i: 1, j: 2 }, { i: 1, j: 3 },  ], css_id: 'tinytable_css_9frw99joajalr5ylz3wh',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_6edzjwrpzkx1y7xire17',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 },  ], css_id: 'tinytable_css_69kh46ldxavvnlchew84',}, \n          { positions: [ { i: 4, j: 4 },  ], css_id: 'tinytable_css_0pj4nvjyofgm580oiad2',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_03doh3mriog5hgfs9ecz(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_t8te0c4vpdhuh18uqrui, .table th.tinytable_css_t8te0c4vpdhuh18uqrui { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; }\n      .table td.tinytable_css_qhqj4dknovfynoemktb5, .table th.tinytable_css_qhqj4dknovfynoemktb5 { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_m8dkmpr2rbybgqpgdos9, .table th.tinytable_css_m8dkmpr2rbybgqpgdos9 { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_dpfskk8ouzgvvajpvihr, .table th.tinytable_css_dpfskk8ouzgvvajpvihr { text-align: center; padding-bottom: 0.1em; }\n      .table td.tinytable_css_c0xjn7mgtp95cl9f4x1v, .table th.tinytable_css_c0xjn7mgtp95cl9f4x1v { text-align: left; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; }\n      .table td.tinytable_css_9frw99joajalr5ylz3wh, .table th.tinytable_css_9frw99joajalr5ylz3wh { text-align: center; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_6edzjwrpzkx1y7xire17, .table th.tinytable_css_6edzjwrpzkx1y7xire17 { text-align: left; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_69kh46ldxavvnlchew84, .table th.tinytable_css_69kh46ldxavvnlchew84 { text-align: left; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_0pj4nvjyofgm580oiad2, .table th.tinytable_css_0pj4nvjyofgm580oiad2 { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_03doh3mriog5hgfs9ecz\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        <caption>Dissimilarity Coefficients Between Year, Weight(kg) and Height(cm) Using Pearson's r and the Halved Dissimilarity Formula</caption>\n              <tr>\n                <th scope=\"col\">rowname</th>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Year</th>\n                <th scope=\"col\">Weight</th>\n                <th scope=\"col\">Height</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>Name  </td>\n                  <td>0    </td>\n                  <td>     </td>\n                  <td>      </td>\n                  <td> </td>\n                </tr>\n                <tr>\n                  <td>Year  </td>\n                  <td>0.702</td>\n                  <td>0    </td>\n                  <td>      </td>\n                  <td> </td>\n                </tr>\n                <tr>\n                  <td>Weight</td>\n                  <td>0.135</td>\n                  <td>0.602</td>\n                  <td>0     </td>\n                  <td> </td>\n                </tr>\n                <tr>\n                  <td>Height</td>\n                  <td>0.176</td>\n                  <td>0.728</td>\n                  <td>0.0321</td>\n                  <td>0</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n:::\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_lz8yd5sq5r67wymzyeq2(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_lz8yd5sq5r67wymzyeq2\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_lz8yd5sq5r67wymzyeq2');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_lz8yd5sq5r67wymzyeq2(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_lz8yd5sq5r67wymzyeq2\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 },  ], css_id: 'tinytable_css_wqkz5ke64jfo3tz50ioa',}, \n          { positions: [ { i: 2, j: 1 }, { i: 3, j: 1 }, { i: 3, j: 2 }, { i: 1, j: 1 }, { i: 1, j: 2 }, { i: 2, j: 2 },  ], css_id: 'tinytable_css_usqsp4z8lcn28xrsgskt',}, \n          { positions: [ { i: 0, j: 3 },  ], css_id: 'tinytable_css_ismbfu3p6d7s9pxolazi',}, \n          { positions: [ { i: 4, j: 3 },  ], css_id: 'tinytable_css_hz4gox78tj2zr7x3tlrw',}, \n          { positions: [ { i: 4, j: 1 }, { i: 4, j: 2 },  ], css_id: 'tinytable_css_foscn0sj7w6ri9usmlxg',}, \n          { positions: [ { i: 1, j: 3 }, { i: 2, j: 3 }, { i: 3, j: 3 },  ], css_id: 'tinytable_css_6hsmvb5vduap6e6pooi9',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_46wh7xv7tyme6bopqkm4',}, \n          { positions: [ { i: 0, j: 1 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_207gbo5dqa17ijewtbtf',}, \n          { positions: [ { i: 4, j: 0 },  ], css_id: 'tinytable_css_1zcaxqz5d9mcen44mh51',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_lz8yd5sq5r67wymzyeq2(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_wqkz5ke64jfo3tz50ioa, .table th.tinytable_css_wqkz5ke64jfo3tz50ioa { text-align: left; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_usqsp4z8lcn28xrsgskt, .table th.tinytable_css_usqsp4z8lcn28xrsgskt { text-align: center; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_ismbfu3p6d7s9pxolazi, .table th.tinytable_css_ismbfu3p6d7s9pxolazi { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_hz4gox78tj2zr7x3tlrw, .table th.tinytable_css_hz4gox78tj2zr7x3tlrw { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_foscn0sj7w6ri9usmlxg, .table th.tinytable_css_foscn0sj7w6ri9usmlxg { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; }\n      .table td.tinytable_css_6hsmvb5vduap6e6pooi9, .table th.tinytable_css_6hsmvb5vduap6e6pooi9 { text-align: center; padding-bottom: 0.1em; }\n      .table td.tinytable_css_46wh7xv7tyme6bopqkm4, .table th.tinytable_css_46wh7xv7tyme6bopqkm4 { text-align: left; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_207gbo5dqa17ijewtbtf, .table th.tinytable_css_207gbo5dqa17ijewtbtf { text-align: center; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; padding-bottom: 0.1em; }\n      .table td.tinytable_css_1zcaxqz5d9mcen44mh51, .table th.tinytable_css_1zcaxqz5d9mcen44mh51 { text-align: left; border-bottom: solid #d3d8dc 0.1em; padding-right: 0.5em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_lz8yd5sq5r67wymzyeq2\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        <caption>Dissimilarity Coefficients Using Pearson's r and the Absolute Dissimilarity Formula</caption>\n              <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Year</th>\n                <th scope=\"col\">Weight</th>\n                <th scope=\"col\">Height</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>0    </td>\n                  <td>     </td>\n                  <td>      </td>\n                  <td> </td>\n                </tr>\n                <tr>\n                  <td>0.597</td>\n                  <td>0    </td>\n                  <td>      </td>\n                  <td> </td>\n                </tr>\n                <tr>\n                  <td>0.27 </td>\n                  <td>0.796</td>\n                  <td>0     </td>\n                  <td> </td>\n                </tr>\n                <tr>\n                  <td>0.352</td>\n                  <td>0.545</td>\n                  <td>0.0642</td>\n                  <td>0</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n:::\n\n\n:::\n:::\n\nNote that either formula should give us approximately equal dissimilarity matrices, which is the case here.\n\n## similarities\n\nIt is also possible to indicate how close two objects $i$ and $j$ are using similarity coefficients. The more alike the two objects are, the larger their similarity, $s(i,j)$. The similarity coefficient takes on values between 0 and 1, where 0 means that $i$ and $j$ are not similar at all and  reflects perfect similarity or sameness. For accurate similarity, the following conditions must hold:\n\n$$\n\\begin{split}\n0 \\leq s(i,j) \\leq 1 \\\\\ns(i,i) = 1\\\\\ns(i,j) = s(j,i) \\\\\n\\end{split}\n$$\nThe table of similarity coefficients is called a similarity matrix and,like a dissimilarity matrix is used to store similarity coefficients. \n\nIf you thought that we can simply use Pearson's r or Spearman's $\\rho$ for the similarity coefficient, you would unfortunately be wrong. Remember that these coefficients also take on negative values. We must transform them in order to bring them to the [0,1] range. \n\n  * If variables with a strong negative correlation are considered to be very different because they're oriented in the opposite direction, then we should use: $s(f,g) = \\frac{(1 + R(f,g))}{2}$ which returns $s(f,g) = 1$ when $R(f,g) = 1$. \n  * When veriables with a strong negative correlation should be grouped– when they measure the same construct– we should use this formula: $s(f,g) = |R(f,g)|$ which returns $s(f,g) = 1$ when $R(f,g) = -1$. \n  \n### other variables\n\n#### binary \n\nWhen a variable can only take two possible outcomes–presence or absence of an attribute–, we don't use standardization; however, we can still assign weights to the ones we consider more important. We can still calculate dissimilarity coefficients, but now our matrix would be a $2 \\times 2$ contingency table where each variable represents the attribute combination for each pair. \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/binary.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n\n## r packages\n\n`cluster`\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}