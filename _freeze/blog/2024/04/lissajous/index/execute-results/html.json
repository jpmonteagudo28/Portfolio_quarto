{
  "hash": "074c171852680deac2edee67f57cf674",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Beautiful movement—the music and beauty of Lissajous(Liss–uh–joo) curves\"\ndate: 2024-04-15\ndescription: \"Simple graphical and mathematical exploration of Lissajous curves \"\ncategories:\n - r\n - simulation\n - Lissajous\nformat:\n  html:\n    css: styles.css\n    code-fold: true\n    code-tools: true\n    code-overflow: wrap\n    code-line-numbers: true\ndoi: 10.59350/y9kmp-zqh66\ncitation: true\ndraft: false\n---\n\n\n\n\n## Lissajous Curves\n\nLissajous curves are created by plotting two oscillations on perpendicular axes $x$ and $y$​​​. These oscillations, represented by sinusoidal functions, intersect to create different patterns. When the ratio of these frequencies is equal to $1$— the oscillations are equally phased— the curve is a straight line. When the frequencies on both axes differ, the oscillations are out of phase—one moves faster than the other at a specific angle—and our Lissajous figure will show a curve. Each frequency produces a specific musical note that will intercept and either form a pleasant sound, harmonious consonance or discordance. Consonant notes have a perfect ratio.\n\n## Music & Perfect Ratios\n\nThink of a guitar string vibrating at a base frequency of $329 Hz$—$329$ cycles per second. By altering our position along the string, we change the frequency and thus produce different notes. If we moved from the nut (fret $0$) to between frets $11$ and $12$ and plucked the string, the frequency would now be twice as high—we call this an octave. If we moved $3/4$ down from the nut, our new note would oscillate at three times the frequency of E4($329Hz$). We can produce an infinite amount of notes by moving along the string and altering the speed of the oscillations. *You are creating music with movement!*\n\n### Theory of Just Intonation\n\nHowever, keeping track of an infinite, unordered sequence of notes is impossible; instead, we use systems that allow us to measure and obtain the frequency of a small number of notes. One such system is called “just intonation” and a commonly seen tuning method is 5-limit tuning. This method allows us to find the exact, pure frequency of other notes by multiplying our base frequency by products of the power of prime numbers $2$, $3$, and $5$ (e.g., $2^{-1} \\cdot 3^{1} \\cdot 5^{1}$).[^1]\n\n[^1]: In 5–limit tuning we only multiply integers to obtain other musical notes.\n\nWe call the sinusoidal movements in intervals of powers of $2$ – octaves, powers of $3$ represent perfect fifths, and powers of $5$ are called major thirds^[octaves: $f_{x} = 2^{k}$; perfect fifths: $3^{k}$, major thirds: $5^{k},k \\in \\mathbb{Z}$.]. By multiplying our base frequency by different combinations of these powers,[^2] we get sets of harmoniously consonant and discordant notes.\n\n[^2]: Sometimes the resulting note is outside our octave,  and we simply divide it by two and bring it back to our interval.\n\n### The Perfect ratios\n\nSo how can we make sure every note is consonant? Thankfully, the ancient Greeks discovered a way to create beautifully sounding and naturally occurring notes using perfect[^3] ratios for octaves, major fifths, and major thirds. These perfect ratios make music blend, flow, and feel “right”. These are the ratios that create all of the Lissajous figures we'll explore today.\n\n[^3]: perfect refers to ratios that produce “just” or “pure” melodic sounds.\n\n\n::: {.cell .tbl-cap-location-bottom layout-align=\"center\" tbl-cap='Perfect ratios in Just Intonation using 5-limit tuning method' tbl-colwidths='[50,50]'}\n\n```{.r .cell-code}\nratios <- c(1,\"9/8\", \"5/4\",\"4/3\",\"3/2\", \"5/3\",\"15/8\",2,240,270,300,320,360,400,450,480)\ncols <- c(\"C\",\"D\",\"E\",\"F\",\"G\",\"A\",\"B\",\"C'\")\nrows <- c(\"Perfect Ratios\", \"Frequency(in Hz)\")\nperfect_ratios <- matrix(ratios, ncol = 8, byrow = TRUE)\ncolnames(perfect_ratios) <- cols\nrownames(perfect_ratios) <- rows\nperfect_ratios\n##                  C     D     E     F     G     A     B      C'   \n## Perfect Ratios   \"1\"   \"9/8\" \"5/4\" \"4/3\" \"3/2\" \"5/3\" \"15/8\" \"2\"  \n## Frequency(in Hz) \"240\" \"270\" \"300\" \"320\" \"360\" \"400\" \"450\"  \"480\"\nknitr::kable(perfect_ratios)\n```\n\n::: {.cell-output-display}\n\n\n|                 |C   |D   |E   |F   |G   |A   |B    |C'  |\n|:----------------|:---|:---|:---|:---|:---|:---|:----|:---|\n|Perfect Ratios   |1   |9/8 |5/4 |4/3 |3/2 |5/3 |15/8 |2   |\n|Frequency(in Hz) |240 |270 |300 |320 |360 |400 |450  |480 |\n\n\n:::\n:::\n\n\n## The Code & Animation\n\nWe'll create the Lissajous curves using two sinusoidal waves on different phases ^[the curves can also be created with $sin(t)$ and $cos(t)$ functions since $cos(t) = sin(t + \\frac{\\pi}{2})$, but the phase difference will now be $\\frac{a}{b}*\\frac{\\pi}{2}$.]. The numerator of the perfect ratio will be the coefficient $a$ of the $sin$ function — $sin(t) = sin(at + \\delta)$— and the denominator $b$ will go to the $y$ coordinate — $sin(t) = sin(bt)$. We'll define our interval from $0$ to $2\\pi$​​. \n\n::: {.callout-note appearance=\"simple\"}\n\n## Helpful Tip\n\nYou can familiarize yourself with Lissajous figures and their sine functions by using this [interactive virtual oscilloscope](https://dood.al/oscilloscope/).\n\n:::\n\nUsing the `gganimate` package in `RStudio`, we'll  build a data frame with a set number of times steps between $0$ and $2\\pi$​; and the figures with coordinates for each perfect ratio. Then, we'll stitch each plot with the time steps and coordinates to get a final $8 × 8$ animated plot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## ------------------------------- ##\n## Creating Lissajous figures      ##\n## ------------------------------- ##\nlibrary(gganimate)# Loading libs   ##\nlibrary(tidyverse)                 ##\nlibrary(here)                      ##\nlibrary(av)                        ##\n## ------------------------------- ##\n\nparams <- data.frame(\n  id <- seq(1,500,1), # no. of steps\n  t <- seq(0,2*pi, length.out = 500)  # equally spaced intervals 0-2*pi\n)\n\nfigs <- function(t){\n  x1 <- sin(t*1) # We're only using perfect ratios\n  y1 <- sin(t*1)\n  \n  x2 <- sin(t*9)\n  y2 <- sin(t*8)\n  \n  x3 <- sin(t*5)\n  y3 <- sin(t*4)\n  \n  x4 <- sin(t*4)\n  y4 <- sin(t*3)\n  \n  x5 <- sin(t*3)\n  y5 <- sin(t*2)\n  \n  x6 <- sin(t*5)\n  y6 <- sin(t*3)\n  \n  x7 <- sin(t*15)\n  y7 <-  sin(t*8)\n  \n  x8 <- sin(t*2)\n  y8 <- sin(t*1)\n  \n  time <- seq_along(t)\n  \n  data.frame( # Create df with x, y variables accross time\n    time, \n    x1, x2, x3, x4, x5, x6, x7, x8,\n    y1, y2, y3, y4, y5, y6, y7, y8\n  )\n}\n\nactual_figs <- figs(params$t)\n\ndf <- bind_cols(params, actual_figs) |> # bind two dfs\n  select(everything()) |> # make data long\n  pivot_longer(x1:x8, names_to = \"x_group\", values_to = \"x\") |>\n  pivot_longer(y1:y8, names_to = \"y_group\", values_to = \"y\") |>\n  mutate(x_group = str_remove(x_group, \"x\"),\n         y_group = str_remove(y_group, \"y\")) |>\n  unite(\"group_id\", x_group, y_group, remove = FALSE)\n\nplot <- df|>\n  ggplot(aes(x = x, y = y, color = group_id, group = group_id)) +\n  geom_point(size = 3) +\n  geom_path() +\n  facet_grid(x_group ~ y_group) +\n  coord_equal() +\n  guides(color = \"none\") +\n  theme_void() +\n  transition_reveal(time) +\n  ease_aes(\"linear\")\n\nanimate(plot, duration = 30, fps = 24, height = 1080, width = 1080,\n        renderer = av_renderer())\n\nanim_save(filename = \"lissajous_figs.mp4\",\n          path = here::here(\"blog\",\"2024\",\"04\",\"lissajous\",\"documents\"),\n          height = 1080, width = 1080)\n#| Code adapted from Kieran Healy's blog \"Pi Day Circles\"\n```\n:::\n\n\n\n\n## The Final Product\n\nHere's the final, animated $8×8$ plot displaying Lissajous figures using only the perfect ratios.\n\n\n```{=html}\n<video autoplay loop muted playsinline controls width = \"100%\" style=\"display: block; margin:auto;\">\n  <source src=\"documents/lissajous_figs.mp4\" type=\"video/mp4\">\n</video>\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}