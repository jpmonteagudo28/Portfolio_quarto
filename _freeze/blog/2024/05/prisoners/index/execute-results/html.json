{
  "hash": "4a31147810a0ae3d42947fb3ad039109",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"The Iterated Prisoners' Dilemma\"\ndate: now\ndescription: \"Rudimentary solutions using R\"\nformat:\n  html:\n    css: styles.css\n    code-fold: false\n    code-tools: true\n    code-overflow: wrap\n    code-line-numbers: false\n#doi: \ncitation: true\ndraft: true\n---\n\n\n\n\n\n\n## Not So Quickly!\n\nIdeally, all humans would cooperate and live in harmony in a world where evil is not partaken. Unfortunately, that world doesn't exist yet so we're stuck with the question of cooperation. *Should we always cooperate?* Yes…**not so quickly!**. \n\nAs R. Axelrod^[The Evolution of Cooperation. *Basic Books, Inc*. New York, 1984] put it: \n\n> The Cooperation theory [here] is based upon an investigation of individuals who pursue their own self–interest wihtout the aid of central authority to force them to cooperate with each other. The reason for assuming self–interest is that it allows an examination of the difficult case when cooperation is not completely based upon a concern for others or upon the welfare of the groups as a whole. \n\n### The Prisoner's Dilemma\n\nThis iterated version of the dilemma was presented as a hypothetical scenario by R. Axelrod:\n\nTwo bank robbers happen to meet. They decide to pull a job together.\nThe cops nab them, but without enough evidence to convict. They need a confession. And they know both robbers are unlikely to talk, since if neither implicates the other, the cops can keep them in jail for only 30 days. \n\nSo they put the two in separate cells. They go to the first prisoner and say: “If you rat on your partner and he stays mum, we’ll let you go and he’ll do ten years.If you both rat on each other, you’ll both do eight years.” Then they go to the second prisoner and say the same thing. \n \nThe first prisoner thinks it over. “If he rats on me and I don’t rat on him, then I lose big-time. If I rat on him and he doesn’t rat on me, then I win big-time. Either way, the smart move is to rat on him. I’ll just hope he’s a sucker and doesn’t rat on me.”   The second prisoner reasons the same way. So they rat on each other, and the cops get their two convictions. If the prisoners had cooperated, both would have gotten off easy. Instead, the rational pursuit of self-interest has put them both in a world of pain.\n\nTo win the game, at least one player must cooperate in the face of betrayal, otherwise both contestants would face unfavorable outcomes.\n\n### The Rules\n\nThe rules of Axelrod's iterated prisoner's dilemma:\n\n1. Two players play 200 matches against each other and against an algorithm that betrayed or cooperated at random. \n2. Players obtain three points for mutual cooperation, one for a mutual betrayal, and five for the player who betrays when the other cooperates.\n\n#### The Path to Follow\n\nI'll attempt to provide four solutions to this problem. The first one will never be the first to betray but will copy the opponent's previous choice; the second solution will betray in response to a cooperation five percent of the time; the third solution will cooperate first and then imitate each of player 1's choices, and the last one will never betray first, but will retaliate in turn on every remaining move until the end of the game\nThe official winning strategy was the following:  \n\n* In the first match-up, cooperate.\n* In every match-up after that, do what the opponent did in the preceding match-up.\n\n#### The Tit–for–Tat solution\n\nI'll imitate this strategy in the first algorithm and decide on the choices for player 1.\n\nFirst, I'll assign values to the three possible outcomes: Mutual cooperation is represented by the integer `3`. Mutual betrayal is represented by `1`, and Unmet cooperation is represented by `5`. Player's choices will be represented by  betrayal equals `1` and cooperation equals `2`.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noutcomes <- factor(c(1,3,5), labels = c(\"Mutual Cooperation\", \"Mutual Betrayal\",\"Unmet Cooperation\"))\nchoices <- factor(c(1,2), labels = c(\"Betray\", \"Cooperate\"))\n\n#> Player 1 choices (46% prob of betrayal, 24% prob cooperation)\np1_choice <- as.numeric(sample(choices,200,replace = T, prob = c(.459,.237)))\ntable(p1_choice)\n#> p1_choice\n#>   1   2 \n#> 132  68\n```\n:::\n\n\n\nNow I have to create a function for player 2 that chooses to cooperate on the first attempt, and copies player 1's choice on subsequent ones. To do this, I have to iterate over each of player 1's choice, and store player 2's replies in a new vector.\n\nTo determine the choice order, I'll create a vector of length 2 with player 1's original choice and subtract 1 from that choice to obtain the alternative. To create the vector of choices of length `n`, I'll append player 1's original choice to a vector of length `n-1` to make sure the first choice is always in position 1 `p1_choice[1]`. The resulting vector will be of length `n`. \n\nTo create the vector or player 2's choices using the tit–for–tat algorithm, I'll create a vector of length `n` equal to `p1_choice`. The first choice will always be cooperation, and all subsequent choices will be player 1's previous response `p1[ i -1]`.\n\n:::{.callout-tip appearance=\"simple\"}\nAlways remember to initialize vectors and perform operations outside the loop, if possible. Doing this will sometimes make your function much, much faster.\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#> @rounds: number of rounds or matches in one game\n#> @prob: probability of betrayal and cooperation\n#> @choice: first choice to start the game. Choice inversion will be applied if staring choice = 1\n#> @replace: sampling with replacement based on choice order. A vector of length 2\n\ntit.for.tat <- function(rounds, \n                        prob, \n                        choice,\n                        replace = TRUE){\n  \n  #Check arguments\n  stopifnot({ \n  is.integer(rounds)\n  is.double(prob)\n  is.logical(choice)\n  is.logical(replace)})\n  \n  choice_order <- c(choice,1 - choice)\n  n <- rounds -1\n  # Choice inversion if choice  = 1\n  if(choice_order[1] == 1){\n    inv.prob <- c(prob[2],prob[1])\n    p1 <- c(choice,sample(choice_order,size = n,replace = replace,prob = inv.prob))\n  } else{\n    p1 <- c(choice,sample(choice_order,size = n,replace = replace,prob = prob))\n  }\n  p2 <- numeric(length(p1))\n  p2[1] <- 1\n  \n  for(i in 2:length(p1)){\n    p2[i] <- p1[i -1]\n  }\n  return(p2)\n}\n\ntable(tit.for.tat(200,prob = c(.459,.237), choice = 0, replace = T))\n#> \n#>   0   1 \n#> 124  76\n```\n:::\n\n\n\n### The Backstabber Prober\n\nThe only difference between Tit–for–Tat and the IBP^[This strategy follows the Joss strategy featured in the 1984 book by R. Axelrod] is that we're adding a random element that will cause player 2 to betray player 1 when faced with a cooperative response. Player 2 will always cooperate on the first round, but the algorithm will be less predictable than the previous one. Not to spoil it, but I think this one will not do as well as Tit–for–Tat.\n\nTo implement the random component needed to defect on 5% of cooperative responses, I will identify each time player 1 chooses to cooperate and then defect when randomly generated number from the uniform distribution is less than or equal to .05^[in theory, this should happen 5% of the time for the uniform distribution]. If the randomly generated number is greater than my default, I'll revert back to the tit–for–tat strategy.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#> @prob: probability of betrayal and cooperation\n#> @default: percentage of cooperative responses on which player 2 betrays player 1\n\nprober <- function(rounds, \n                   prob,\n                   choice,\n                   default,\n                   replace = TRUE){\n  \n    #Check arguments\n  stopifnot({ \n  is.integer(rounds)\n  is.double(prob)\n  is.logical(choice)\n  is.double(default)\n  is.logical(replace)})\n  \n  choice_order <- c(choice, 1 - choice)\n  n <- rounds - 1\n  if(choice_order[1] == 1){\n    inv.prob <- c(prob[2],prob[1])\n    p1 <- c(choice,sample(choice_order,size = n,replace = replace,prob = inv.prob))\n  } else{\n    p1 <- c(choice,sample(choice_order,size = n,replace = replace,prob = prob))\n  }\n  p2 <- numeric(length(p1))\n  p2[1] <- 1\n  \nfor (i in 2:length(p1)) {\n  if (p1[i - 1] == 1) {\n    if (runif(1) < default) { # % chance to switch from 1 to 0\n      p2[i] <- 0\n    } else {\n      p2[i] <- p1[i - 1]\n    }\n  } else {\n    \n    p2[i] <- p1[i -1]\n  }\n}\n  return(p2)\n}\n\ntable(prober(200,prob = c(.459,.237), choice = 0, default = .05, replace = T))\n#> \n#>   0   1 \n#> 133  67\n```\n:::\n\n\n\n\n### The Corteous Cat\n\nA less glorious but more common solution is to simply imitate each of player 1 moves to a T. Player 2 will never cooperate first unless player 1 chooses to cooperate. This copy cat algorithm is looking at the current round and copying the first player's moves. It is not concerned with the previous moves. \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n\ncopy.cat <- function(rounds, \n                   prob,\n                   choice,\n                   replace = TRUE){\n  \n    #Check arguments\n  stopifnot({ \n  is.integer(rounds)\n  is.double(prob)\n  is.logical(choice)\n  is.logical(replace)})\n  \n  choice_order <- c(choice, 1 - choice)\n  n <- rounds - 1\n  if(choice_order[1] == 1){\n    inv.prob <- c(prob[2],prob[1])\n    p1 <- c(choice,sample(choice_order,size = n,replace = replace,prob = inv.prob))\n  } else{\n    p1 <- c(choice,sample(choice_order,size = n,replace = replace,prob = prob))\n  }\n  p2 <- numeric(length(p1))\n  p2[1] <- 1\n  \n  for(i in 2:length(p1)){\n    if(p1[i] == 1){\n      p2[i] <- 1\n    } else {\n      p2[i] <- 0\n    }\n  }\n  return(p2)\n}\n\ntable(copy.cat(200,prob = c(.459,.237), choice = 0, replace = T))\n#> \n#>   0   1 \n#> 124  76\n```\n:::\n\n\n\n### The Squirrel's Revenge\n\nThe last algorithm will not play nice on the first round and will exact revenge on player 1 until the game is over^[A copy of the aggressive Friedman's algorithm]. This player is a more revengeful fellow. Let's see how to implement it. \n\nThe key to achieve such vengeful results is to track when player 1 switches from betrayals to cooperation. Once we identify a cooperation, player 2 will no longer cooperate. I'll only add one argument `zero_switch` to identify when player 1 chooses to defect. This logical vector will automatically switch to true inside the for loop, and will cause player 2 to defect on every move for the remainder of the game. \n\nSomething worthy of attention here is that if the probability of betrayal is higher than cooperation, the revenge algorithm will most likely never cooperate after the first couple of rounds. I'll make sure to set a higher probability of cooperation to see the algorithm in action. \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n\nexact.revenge <- function(rounds, \n                   prob,\n                   choice,\n                   replace = TRUE){\n  \n    #Check arguments\n  stopifnot({ \n  is.integer(rounds)\n  is.double(prob)\n  is.logical(choice)\n  is.logical(replace)})\n  \n  choice_order <- c(choice, 1 - choice)\n  n <- rounds - 1\n  if(choice_order[1] == 1){\n    inv.prob <- c(prob[2],prob[1])\n    p1 <- c(choice,sample(choice_order,size = n,replace = replace,prob = inv.prob))\n  } else{\n    p1 <- c(choice,sample(choice_order,size = n,replace = replace,prob = prob))\n  }\n  p2 <- numeric(length(p1))\n  p2[1] <- 1\n  zero_switch <- FALSE\n  \n  for(i in 2:length(p1)){\n    if(p1[i -1] == 0){\n      zero_switch <- TRUE\n    } \n    p2[i]<- ifelse(zero_switch,0,1)\n  }\n  return(p2)\n}\n\ntable(exact.revenge(200,prob = c(.159,.437), choice = 1, replace = T))\n#> \n#>   0   1 \n#> 193   7\n```\n:::\n\n\n\n## Algorithm Perfomance\n\nNow that all four algorithms are created, I'll implement a function to evaluate the overall performance in total points after 200 rounds. \n\nFirst, I have to create an outcome matrix to store the outcome of each choice combination. Then, I have to create a function that repeatedly compares algorithms over `n` number of games. To do this, I would have to update choice order for each game, if necessary; store total number of choices per game in two vectors, one for each player, create a list and evaluate choice outcome against the outcome matrix, and then sum each player's score in the new list to find the total number of points per game. Lastly, I would have to calculate the average number of total points per game and compare algorithms this way.  \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#> @(...) arguments include:\n#>              @alg: algorithms to compare\n#>              @rounds: number of rounds in a game\n#>              @prob:   probability of betrayal and cooperation.\n#>              @choice: starting choice.\n#>              @default: percentage of cooperative responses on which player 2 betrays player 1\n#> @iter: how many games of `n` rounds should be played.\n\ncomp.alg <- function(alg,\n                     iter = NULL,\n                     rounds,\n                     prob,\n                     choice,\n                     replace = TRUE,\n                     ...){\n  #Check arguments\n  stopifnot({\n    is.list(alg)\n    is.numeric(iter) && iter > 0})  \n  \n  out <- matrix(c(3,5,0,1), nrow = 2, byrow = TRUE)\n        rownames(out) <- c(\"P1.C\",\"P1.B\")\n        colnames(out) <- c(\"P2.C\",\"P2.B\")\n  \n  play.game <- function(rounds, \n                        prob,\n                        choice, \n                        default = NULL,\n                        replace = TRUE) {\n    p1 <- do.call(alg[[1]],list(rounds = rounds,\n                                prob = prob,\n                                choice = choice,\n                                replace = replace))\n    p2 <- do.call(alg[[2]],list(rounds = rounds,\n                                prob = prob,\n                                choice = choice,\n                                replace = replace))\n   \n  do.score <- function(P1,P2){\n    l1 <- list(P1,P2)\n    game_res <- data.frame(P1 = numeric(length(P1)), \n                           P2 = numeric(length(P2)))\n    \n    for(i in seq_along(l1[[1]])){\n      c1 <- l1[[1]][i]\n      c2 <- l1[[2]][i]\n      \n      p1_score <- out[c1 + 1, c2 + 1]\n      p2_score <- t(out)[c1 + 1, c2 + 1]\n      \n      game_res$P1[i] <- p1_score\n      game_res$P2[i] <- p2_score\n    }\n     return(game_res)\n  }\n  out_game <- do.score(p1,p2)\n  colSums(out_game)\n  }\n  \n  boot.results <- list2DF(replicate(iter, play.game(rounds = rounds,\n                                prob = prob,\n                                choice = choice,\n                                replace = replace), simplify = FALSE))\n  \n  results <- as.matrix(do.call(rbind,boot.results))\n  \n  \n  return(as.data.frame(results))\n}\n\n#Let's test it\ntest <- comp.alg(c(copy.cat, tit.for.tat), \n                 iter = 500, \n                 rounds = 200, \n                 prob = c(.345, .231), \n                 choice = 0)\n\nhead(test)\n#>    P1  P2\n#> 1 516 491\n#> 2 510 465\n#> 3 460 490\n#> 4 506 461\n#> 5 469 479\n#> 6 482 477\n```\n:::\n\n\n\n### Code Benchmarking\n\nFirst, I'll look at the execution time and memory usage of my `comp.alg` function for several algorithms^[The `comp.alg` function is not currently dealing with the `default` argument of the `prober` algorithm.I'm thinking of a way to implement it in a naturally efficient way.]. I'll use the `bench` package to look at these two performance metrics. I'll wrap my code in a function and measure its performance^[look up the `bench::mark()` function to see which metrics are calculated.]\n\nThe second step is to use `bench::pres()` to supply my wrapper function with a grid of values to use as iterations. Laslty, I'll visualize the the number of iterations vs. execution time across algorithms. \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n\n bench.comp.alg <- function(iter){\n     bench::mark(\n         \"Copy\" = comp.alg(c(copy.cat,exact.revenge),iter = iter, rounds = 200, c(.25,.32),choice = 0)$P1,\n         \"Exact\" = comp.alg(c(copy.cat,exact.revenge),iter = iter, rounds = 200, c(.25,.32),choice = 0)$P2,\n         \"tft\" = comp.alg(c(tit.for.tat,exact.revenge),iter = iter, rounds = 200, c(.25,.32),choice = 0)$P1,\n         time_unit = \"ms\", \n         check = FALSE\n     )\n }\n\nresults <- bench::press(\n     iter = c(10,50,100,300,500,700,900,1000),\n     bench.comp.alg(iter)\n )\n\n#> A tibble: 24 × 14\n#>   expression  iter    min median `itr/sec` mem_alloc `gc/sec` n_itr  n_gc total_time result memory                   time            gc      \n#>   <bch:expr> <dbl>  <dbl>  <dbl>     <dbl> <bch:byt>    <dbl> <int> <dbl>      <dbl> <list> <list>                   <list>          <list>  \n#>  1 Copy          10   31.3   32.6    30.6      6.51MB     40.8     6     8       196. <NULL> <Rprofmem [4,132 × 3]>   <bench_tm [14]> <tibble>\n#>  2 Exact         10   29.7   30.8    32.2      6.51MB     32.2     8     8       248. <NULL> <Rprofmem [4,131 × 3]>   <bench_tm [16]> <tibble>\n#>  3 tft           10   30.8   32.4    30.8      6.51MB     30.8     7     7       227. <NULL> <Rprofmem [4,131 × 3]>   <bench_tm [14]> <tibble>\n#>  4 Copy          50  207.   222.      4.40    32.55MB     14.7     3    10       681. <NULL> <Rprofmem [20,668 × 3]>  <bench_tm [3]>  <tibble>\n#>  5 Exact         50  258.   262.      3.82    32.55MB     11.5     2     6       524. <NULL> <Rprofmem [20,806 × 3]>  <bench_tm [2]>  <tibble>\n #> 6 tft           50  205.   266.      4.03    32.55MB     10.8     3     8       744. <NULL> <Rprofmem [20,808 × 3]>  <bench_tm [3]>  <tibble>\n#>  7 Copy         100  576.   576.      1.74    65.09MB     12.2     1     7       576. <NULL> <Rprofmem [41,418 × 3]>  <bench_tm [1]>  <tibble>\n#>  8 Exact        100  400.   411.      2.43    65.09MB     14.6     2    12       821. <NULL> <Rprofmem [41,400 × 3]>  <bench_tm [2]>  <tibble>\n#>  9 tft          100  372.   390.      2.57    65.09MB     15.4     2    12       780. <NULL> <Rprofmem [41,461 × 3]>  <bench_tm [2]>  <tibble>\n#> 10 Copy         300 1254.  1254.      0.798  195.27MB     10.4     1    13      1254. <NULL> <Rprofmem [123,916 × 3]> <bench_tm [1]>  <tibble>\n# ℹ 14 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n\n\n\nLet's now visualize the performance of each algorithm using `ggplot2`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n\nlibrary(ggplot2)\nlibrary(showtext)\n\n# Customize fonts\nfont_add_google(\"Ubuntu\",\"ubu\")\nshowtext_auto()\ntext <- \"ubu\"\n\n\n\nggplot(results,\n       aes(iter,median, col = attr(expression,\"description\"))) +\n  geom_point(size = 4) +\n  geom_smooth(se = FALSE) +\n  labs(x = \"No. of iterations\",\n       y = \"Execution Time (ms)\",\n       colour = \"Algorithm\") +\n  #scale_color_manual(values = iter) +\n  theme_minimal() +\n  theme(legend.position = \"top\",\n        legend.title = element_text(family = text, size = 23),\n        legend.text = element_text(family = text, size = 18),\n        plot.background = element_rect(fill = \"#f8f9f9\",\n                                       color = \"NA\"),\n        axis.title = element_text(family = text, size = 18,\n                                  hjust = .5),\n        axis.text = element_text(family = text,size = 16),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank()\n        )\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/alg_perf.png){fig-align='center' width=354}\n:::\n:::\n\n\n\n### Practical Implications\nAmong all the algorithms submitted to Axelrod, the top performer was Tit–for–tat because it was “nice”. Algorithms that always betrayed or were “sneaky” were more likely to end up in a state of conflict. \n\nHere are the rules for strategic cooperation:  \n\n* Avoid unnecessary conflict by cooperating as long as your opponent does. \n* If your opponent betrays you without provocation— respond in kind…once.\n* Then forgive the betrayal, and cooperate again.\n* Be clear and predictable so your opponent knows how you act and can plan accordingly. \n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}